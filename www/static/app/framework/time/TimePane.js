// Generated by CoffeeScript 1.9.3
(function () {
    define(["angular", "framework/time/CursorPositionUtil", "framework/utils/DBCUtils"], function (angular, CursorPositionUtil, DBCUtils) {
        var TimePane, initGlobalTimeEvent, timePaneTemplate, getTopJq;
        timePaneTemplate = "<div class=\"dropdown-menu timepane form-time\" ng-style=\"$timePane.timepaneStyle\">\n    <div class=\"form-time-set\"><a class=\"btn\"><i class=\"fi fi-arrow-up\" ng-click=\"$timePane.increaseHour()\"></i></a> <input\n            type=\"text\" class=\"time-hour-input\" ng-keypress=\"$timePane.hourKeyPress($event)\" ng-model=\"$timePane.hour\"\n            ng-keyup=\"$timePane.hourKeyUp($event)\"> <a class=\"btn\"> <i class=\"fi fi-arrow-down\"\n                                                                  ng-click=\"$timePane.decreaseHour()\"></i> </a></div>\n    <div class=\"form-time-split\" ng-class='{\"form-time-second\":$timePane.secondPane}'>:</div>\n    <div class=\"form-time-set\"><a class=\"btn\"> <i class=\"fi fi-arrow-up\" ng-click=\"$timePane.increaseMinute()\"> </i> </a>\n        <input type=\"text\" ng-keypress=\"$timePane.minuteKeyPress($event)\" ng-keyup=\"$timePane.minuteKeyUp($event)\"\n               ng-model=\"$timePane.minute\" class=\"time-hour-input\"> <a class=\"btn\"><i class=\"fi fi-arrow-down\"\n                                                                                 ng-click=\"$timePane.decreaseMinute()\"></i></a>\n    </div>\n<div class=\"form-time-split\" ng-class='{\"form-time-second\":$timePane.secondPane}' ng-show='$timePane.secondPane'>:</div>\n<div class=\"form-time-set\" ng-show='$timePane.secondPane'><a class=\"btn\"> <i class=\"fi fi-arrow-up\" ng-click=\"$timePane.increaseSecond()\"> </i> </a>\n        <input type=\"text\" ng-keypress=\"$timePane.secondKeyPress($event)\" ng-keyup=\"$timePane.secondKeyUp($event)\"\n               ng-model=\"$timePane.second\" class=\"time-hour-input\"> <a class=\"btn\"><i class=\"fi fi-arrow-down\"\n   ng-click=\"$timePane.decreaseSecond()\"></i></a>\n    </div></div>";
        initGlobalTimeEvent = function () {
            var me;
            me = this;

            var documentClick = function (event) {
                var targetEle = event.srcElement || event.target,
                    injector = angular.element(document).injector(),
                    $rootScope;
                if (injector) {
                    $rootScope = injector.get("$rootScope");
                } else {
                    documentClick = angular.noop;
                    return;
                }
                if (angular.isDefined($rootScope.$timePane) && angular.isDefined($rootScope.$timePane.parasitic)) {
                    if ($rootScope.$timePane.parasitic.find(targetEle).length !== 0) {
                        return;
                    }
                }

                if (me.element && me.element.find(targetEle).length === 0) {
                    $rootScope.$apply(function () {
                        me.timepaneStyle = {};
                        if (me.parasitic) {
                            var $input = me.parasitic.children('input');
                            $input.removeClass('is-show-menu');
                            $input.trigger('blurVerify');
                        }
                    });
                }
            };

            angular.element(document).on("click.time_pane", documentClick);
            if (window.parent !== window) {
                getTopJq()(window.parent.document).on("click.time_pane", documentClick);
                $(window).on('destroy', function () {
                    getTopJq()(window.parent.document).off("click.time_pane");
                });
            }
        };

        getTopJq = function () {
            return angular.element(document).injector().get("GillionLocationService").getTopJq();
        };

        TimePane = (function () {
            function TimePane() {
                var injector = angular.element(document).injector(),
                    $compile = injector.get("$compile"),
                    $rootScope = injector.get("$rootScope"),
                    GillionLocationService = injector.get("GillionLocationService"),
                    topWindow = GillionLocationService.getRealTopWindow(),
                    topJq = topWindow.$,
                    $topCompile = topJq(topWindow.document).injector().get('$compile');
                this.template = timePaneTemplate;
                this.element = $topCompile(this.template)($rootScope);
                GillionLocationService.createHtmltoTop(this.element[0]);

                this.isHour24 = true;
                this.secondPane = false;
                /*绑定全局点击事件 */
                initGlobalTimeEvent.call(this);
            }


            /*刷新时间 */

            TimePane.prototype.refresh = function (showTime, parasitic, isHour24) {
                var timeInfo;
                if (angular.isDefined(showTime)) {
                    if (angular.isDate(showTime)) {
                        this.hour = showTime.getHours();
                        this.minute = showTime.getMinutes();
                        this.second = showTime.getSeconds();
                    } else {
                        timeInfo = showTime.split(":");
                        this.hour = timeInfo[0];
                        this.minute = timeInfo[1];
                        if (!!timeInfo[2]) {
                            this.second = timeInfo[2];
                        } else if (this.secondPane) {
                            this.second = new Date().getSeconds();
                        }

                    }
                }
                if (angular.isDefined(parasitic)) {
                    this.parasitic = parasitic;
                }
                if (angular.isDefined(isHour24)) {
                    this.isHour24 = isHour24;
                }
            };

            /*是否包含秒框*/
            TimePane.prototype.setSecondPane = function (pattern) {
                this.secondPane = /(s+)/.test(pattern);
            };

            TimePane.prototype.getStyle = function (element, att) {
                if (window.getComputedStyle) {
                    return window.getComputedStyle(element)[att];
                } else {
                    return element.currentStyle[att];
                }
            };

            /*显示时间模块 */

            TimePane.prototype.showTimepane = function () {
                var elementWidth = this.parasitic[0].offsetWidth,
                    timePaneWidth = this.element[0].offsetWidth || parseInt(this.getStyle(this.element[0], "width") ||
                        this.element[0].currentStyle.width, 10),
                    timePaneHeight = this.element[0].offsetHeight || parseInt(this.getStyle(this.element[0], "height") ||
                        this.element[0].currentStyle.height, 10);

                var GillionLocationService = angular.element(document).injector().get("GillionLocationService");
                var location = GillionLocationService.calculateLocation(this.parasitic);
                if (location.right > timePaneWidth) {
                    this.element.css("left", location.left);
                } else {
                    this.element.css("left", location.left - (timePaneWidth - elementWidth));
                }
                if (location.bottom > timePaneHeight - document.documentElement.scrollTop) {
                    this.element.css("top", location.top + this.parasitic[0].offsetHeight);
                } else {
                    this.element.css("top", location.top - timePaneHeight);
                }
                //this.element.css("top", location.top + this.parasitic[0].offsetHeight);
                this.timepaneStyle = {
                    "display": "block"
                };

                this.element.css("display", "block");
                this.parasitic && this.parasitic.children('input').addClass('is-show-menu');
            };


            /*增加小时 */

            TimePane.prototype.increaseHour = function () {
                var _hour;
                this.hour = this.hour || "00";
                _hour = parseInt(this.hour, 10) + 1;
                if (_hour < 0) {
                    _hour = 0;
                }

                /*24小时制的情况 */
                if (this.isHour24) {
                    if (_hour >= 24) {
                        _hour = 0;
                    }
                } else {
                    if (_hour >= 12) {
                        _hour = 0;
                    }
                }
                this.hour = _hour < 10 ? "0" + _hour : "" + _hour;
                this.change();
            };


            /*增加分钟 */

            TimePane.prototype.increaseMinute = function () {
                var _minute;
                this.minute = this.minute || "00";
                _minute = parseInt(this.minute, 10) + 1;
                if (_minute < 0) {
                    _minute = 59;
                }
                if (_minute == 60) {
                    _minute = 0;
                    this.increaseHour();
                }
                this.minute = _minute < 10 ? "0" + _minute : "" + _minute;
                this.change();
            };


            /*增加秒 */

            TimePane.prototype.increaseSecond = function () {
                var _second;
                this.second = this.second || "00";
                _second = parseInt(this.second, 10) + 1;
                if (_second < 0) {
                    _second = 59;
                }
                if (_second == 60) {
                    _second = 0;
                    this.increaseMinute();
                }
                this.second = _second < 10 ? "0" + _second : "" + _second;
                this.change();
            };


            TimePane.prototype.hideTimePane = function () {
                this.timepaneStyle = {};
                this.parasitic && this.parasitic.children('input').removeClass('is-show-menu');
            };


            /*减少小时 */

            TimePane.prototype.decreaseHour = function () {
                var _hour;
                this.hour = this.hour || "00";
                _hour = parseInt(this.hour, 10) - 1;
                if (_hour < 0) {
                    if (this.isHour24) {
                        _hour = 23;
                    } else {
                        _hour = 11;
                    }

                }

                /*24小时制的情况 */
                if (this.isHour24) {
                    if (_hour >= 24) {
                        _hour = 23;
                    }
                } else {
                    if (_hour >= 12) {
                        _hour = 11;
                    }
                }
                this.hour = _hour < 10 ? "0" + _hour : "" + _hour;
                this.change();
            };


            /*减小分钟 */

            TimePane.prototype.decreaseMinute = function () {
                var _minute;
                this.minute = this.minute || "00";
                _minute = parseInt(this.minute, 10) - 1;
                if (_minute == -1) {
                    this.decreaseHour();
                    _minute = 59;
                }

                if (_minute >= 60) {
                    _minute = 59;
                }
                this.minute = _minute < 10 ? "0" + _minute : "" + _minute;
                this.change();
            };

            /*减小秒 */

            TimePane.prototype.decreaseSecond = function () {
                var _second;
                this.second = this.second || "00";
                _second = parseInt(this.second, 10) - 1;
                if (_second == -1) {
                    this.decreaseMinute();
                    _second = 59;
                }

                if (_second >= 60) {
                    _second = 59;
                }
                this.second = _second < 10 ? "0" + _second : "" + _second;
                this.change();
            };


            /*值改变回调定义 */

            TimePane.prototype.change = function (callback) {
                if (!this.hour) this.hour = "00";
                if (!this.minute) this.minute = "00";
                if (!this.second) this.second = "00";
                if (angular.isDefined(callback)) {
                    if (angular.isFunction(callback)) {
                        this.changeCallback = callback;
                        return;
                    } else {
                        this.changeCallback.call(this, callback);
                    }
                } else {
                    if (this.secondPane) {
                        this.changeCallback.call(this, this.hour + ":" + this.minute + ":" + this.second);
                    } else {
                        this.changeCallback.call(this, this.hour + ":" + this.minute);
                    }
                }
            };


            /*小时输入防止按住重复输入 */

            TimePane.prototype.hourKeyPress = function ($event) {
                var keyCode = $event.keyCode, charCode = $event.charCode;
                var isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
                if (isFireFox) {
                    if(keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 32)) {
                        $event.preventDefault();
                        return;
                    }
                } else {
                    if (!((keyCode > 47 && keyCode < 58) || keyCode === 32)) {
                        $event.preventDefault();
                        return;
                    }
                }
                if (this.hourKeyFlag) {
                    $event.preventDefault();
                } else {
                    this.hourKeyFlag = true;
                }
            };


            /*输入小时 */

            TimePane.prototype.hourKeyUp = function ($event) {
                var element, pos, value;
                element = getTopJq()($event.srcElement || $event.target);

                value = element.val();
                value = DBCUtils.toCDB(value);
                element.val(value);
                value = parseInt(value, 10);
                this.hourKeyFlag = false;
                if (isNaN(value)) {
                    value = 0;
                }
                if (value > 10) {
                    if (this.isHour24) {
                        if (value > 23 || value < 0) {
                            pos = CursorPositionUtil.getPosition(element);
                            CursorPositionUtil.removePositionChar(element, pos);
                            CursorPositionUtil.setPosition(element, pos - 1);
                        }
                    } else {
                        if (value > 11 || value < 0) {
                            pos = CursorPositionUtil.getPosition(element);
                            CursorPositionUtil.removePositionChar(element, pos);
                            CursorPositionUtil.setPosition(element, pos - 1);
                        }
                    }
                    value = parseInt(element.val(), 10);
                }
                this.hour = value < 10 ? "0" + value : "" + value;
                this.change();
            };


            /*输入分钟 */

            TimePane.prototype.minuteKeyUp = function ($event) {
                var element, pos, value;
                element = getTopJq()($event.srcElement || $event.target);
                value = element.val();
                value = DBCUtils.toCDB(value);
                element.val(value);
                value = parseInt(value, 10);
                this.minuteKeyFlag = false;
                if (value > 59) {
                    pos = CursorPositionUtil.getPosition(element);
                    CursorPositionUtil.removePositionChar(element, pos);
                    CursorPositionUtil.setPosition(element, pos - 1);
                    value = element.val();
                    value = parseInt(value, 10);
                }
                if (isNaN(value)) {
                    value = 0;
                }
                if (value > 10) {
                    if (value > 59 || value < 0) {
                        pos = CursorPositionUtil.getPosition(element);
                        CursorPositionUtil.removePositionChar(element, pos);
                        CursorPositionUtil.setPosition(element, pos - 1);
                    }
                    value = parseInt(element.val(), 10);
                }
                this.minute = value < 10 ? "0" + value : "" + value;
                this.change();
            };


            /*分钟输入防止按住重复输入 */

            TimePane.prototype.minuteKeyPress = function ($event) {
                var keyCode = $event.keyCode, charCode = $event.charCode;
                var isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
                if (isFireFox) {
                    if(keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 32)) {
                        $event.preventDefault();
                        return;
                    }
                } else {
                    if (!((keyCode > 47 && keyCode < 58) || keyCode === 32)) {
                        $event.preventDefault();
                        return;
                    }
                }
                if (this.minuteKeyFlag) {
                    $event.preventDefault();
                } else {
                    this.minuteKeyFlag = true;
                }
            };


            /*输入秒 */

            TimePane.prototype.secondKeyUp = function ($event) {
                var element, pos, value;
                element = getTopJq()($event.srcElement || $event.target);
                value = element.val();
                value = DBCUtils.toCDB(value);
                element.val(value);
                value = parseInt(value, 10);
                this.secondKeyFlag = false;
                if (value > 59) {
                    pos = CursorPositionUtil.getPosition(element);
                    CursorPositionUtil.removePositionChar(element, pos);
                    CursorPositionUtil.setPosition(element, pos - 1);
                    value = element.val();
                    value = parseInt(value, 10);
                }
                if (isNaN(value)) {
                    value = 0;
                }
                if (value > 10) {
                    if (value > 59 || value < 0) {
                        pos = CursorPositionUtil.getPosition(element);
                        CursorPositionUtil.removePositionChar(element, pos);
                        CursorPositionUtil.setPosition(element, pos - 1);
                    }
                    value = parseInt(element.val(), 10);
                }
                this.second = value < 10 ? "0" + value : "" + value;                
                this.change();
            };


            /*秒输入防止按住重复输入 */

            TimePane.prototype.secondKeyPress = function ($event) {
                var keyCode = $event.keyCode, charCode = $event.charCode;
                var isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
                if (isFireFox) {
                    if(keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 32)) {
                        $event.preventDefault();
                        return;
                    }
                } else {
                    if (!((keyCode > 47 && keyCode < 58) || keyCode === 32)) {
                        $event.preventDefault();
                        return;
                    }
                }
                if (this.secondKeyFlag) {
                    $event.preventDefault();
                } else {
                    this.secondKeyFlag = true;
                }
            };


            TimePane.prototype.destroy = function () {
                var injector = angular.element(document).injector(),
                    $rootScope = injector.get("$rootScope");
                delete $rootScope.$timePane;
                this.element.remove();
                for (var key in this) {
                    delete this[key];
                }
                angular.element(document).off("click.time_pane");
            };

            return TimePane;

        })();
        return TimePane;
    });

}).call(this);
