// Generated by CoffeeScript 1.9.3
define(["angular", "framework/time/CursorPositionUtil"], function (angular, CursorPositionUtil) {
    var Calendar, calendarTemplate, initGlobalCalendarEvent, getTopJq;
    if (!window.$config) window.$config = {};
    if ($config.i18nInfo === undefined) $config.i18nInfo = {};
    calendarTemplate = '<div class="dropdown-menu calendar"  ng-style="calendar.calendarStyle"> <div class="form-date-yearmonth"> <a class="btn" ng-click="calendar.prevMonth()" ><span class="arrow-right"></span></a> <div class="form-date-year"> <input type="text" class="form-text date-year-input" ng-keypress="calendar.typeYearPress($event)" ng-keyup="calendar.typeYear($event)" ng-model="calendar.year" type="text" ng-click="calendar.showYearPane()" > <ul class="dropdown-menu" ng-style="calendar.yearPaneStyle"> <li ng-repeat-start="i in [0,1,2,3,4]"> <a href="javascript:;" ng-click="calendar.selectYear(calendar.yearPaneShowArr[i])" ng-bind="calendar.yearPaneShowArr[i]"></a> </li> <li ng-repeat-end> <a href="javascript:;" ng-click="calendar.selectYear(calendar.yearPaneShowArr[5+i])" ng-bind="calendar.yearPaneShowArr[5+i]"></a> </li> <li class="form-date-years-close"> <a class="btn" ng-click="calendar.prevYearPage()"><span class="arrow-right"  ></span></a> <a class="btn" ng-click="calendar.hideYearPane()"><i class="fi fi-close-small" ></i></a> <a class="btn" ng-click="calendar.nextYearPage()"><span class="arrow-left"></span></a> </li> </ul> </div> <div class="form-date-month" ng-bind="calendar.month">月</div> <a class="btn" ng-click="calendar.nextMonth()"><span class="arrow-left"></span></a> </div> <div class="form-date-days" disabled="disabled"> <table> <tbody> <tr> <th>' + ($config.i18nInfo.sunday ? $config.i18nInfo.sunday : '日') + '</th> <th>' + ($config.i18nInfo.monday ? $config.i18nInfo.monday : '一') + '</th> <th>' + ($config.i18nInfo.tuesday ? $config.i18nInfo.tuesday : '二') + '</th> <th>' + ($config.i18nInfo.wednesday ? $config.i18nInfo.wednesday : '三') + '</th> <th>' + ($config.i18nInfo.thursday ? $config.i18nInfo.thursday : '四') + '</th> <th>' + ($config.i18nInfo.friday ? $config.i18nInfo.friday : '五') + '</th> <th>' + ($config.i18nInfo.saturday ? $config.i18nInfo.saturday : '六') + '</th> </tr> <tr ng-repeat="row in [0,1,2,3,4,5]" > <td ng-click="calendar.chooseDate(calendar.calendarDateArr[row*7+column].date)" ng-class="calendar.calendarDateArr[row*7+column].cellClass" ng-repeat="column in [0,1,2,3,4,5,6]" date-str="{{calendar.calendarDateArr[row*7+column].dateStr}}" ng-disabled="calendar.paneDisabled(calendar.calendarDateArr[row*7+column].date)" ng-bind="calendar.calendarDateArr[row*7+column].day">  </td> </tr> </tbody> </table> </div> <div class="form-date-bar"> <a class="btn" href="javascript:;" ng-click="calendar.confirm()">' + ($config.i18nInfo.dateConfirm ? $config.i18nInfo.dateConfirm : '确定') + '</a> <div class="form-date-time" ng-show="calendar.timeModuleDisplay"> <input type="text" class="form-text date-hour" ng-blur="calendar.confirmHour($event)" ng-keyup="calendar.hourKeyUp($event)" ng-keypress="calendar.hourKeyPress($event)" ng-model="calendar.hour" > <span ng-class="{\'form-date-second\':calendar.secondDisplay}">:</span> <input type="text" class="form-text date-minute" ng-blur="calendar.confirmMinute($event)" ng-keypress="calendar.minuteKeyPress($event)" ng-keyup="calendar.minuteKeyUp($event)" ng-model="calendar.minute" > <span ng-class="{\'form-date-second\':calendar.secondDisplay}" ng-show="calendar.secondDisplay">:</span> <input type="text"  ng-show="calendar.secondDisplay" class="form-text date-second" ng-blur="calendar.confirmSecond($event)" ng-keypress="calendar.secondKeyPress($event)" ng-keyup="calendar.secondKeyUp($event)" ng-model="calendar.second" > </div> <a class="btn" href="javascript:;" ng-click="calendar.clear()">' + ($config.i18nInfo.dateClear ? $config.i18nInfo.dateClear : '清除') + '</a> </div> </div>';
    /*初始化日历控件的全局事件 */
    initGlobalCalendarEvent = function () {
        var me, yearPaneEle,
            documentClick;
        me = this;
        yearPaneEle = me.element.find(".form-date-year");

        documentClick = function (event) {
            var targetEle = event.srcElement || event.target,
                injector = angular.element(document).injector(),
                $rootScope;
            if (injector) {
                $rootScope = injector.get("$rootScope");
            } else {
                documentClick = angular.noop;
                return;
            }
            if (angular.isDefined(me.parasitic)) {
                if (me.parasitic.find(targetEle).length !== 0) {
                    return
                }
                if (me.element.find(targetEle).length !== 0) {
                    if (yearPaneEle.find(targetEle).length === 0) {
                        try {
                            $rootScope.$apply(function () {
                                me.hideYearPane();
                            });
                        } catch (ignored) {
                        }
                    }
                } else {
                    try {
                        $rootScope.$apply(function () {
                            me.hideYearPane();
                            me.hideCalendar();
                        });
                    } catch (ignored) {
                    }
                }
            }
        };

        angular.element(document).on("click", documentClick);
        angular.element(document).on("mousedown", documentClick);

        if (window.parent != window) {
            getTopJq()(window.parent.document).on("click", documentClick);
            $(window).on('destroy', function () {
                getTopJq()(window.parent.document).off("click", documentClick);
            });
        }

        angular.element('body').on("focus", '*', function (event) {
            var targetEle = angular.element(event.srcElement || event.target),
                injector = angular.element(document).injector(),
                $rootScope = injector.get("$rootScope");
            //若当前聚焦对象不在日历面板内，同时不为日期控件
            if (me.element.find(targetEle).length === 0 && !targetEle.hasClass("date-text-input")) {
                if (!$rootScope.$$phase) {
                    $rootScope.$apply(function () {
                        me.hideCalendar();
                    });
                } else {
                    me.hideCalendar();
                }
            }
        });
    };

    getTopJq = function () {
        return angular.element(document).injector().get("GillionLocationService").getTopJq();
    };

    /*日历对象 */
    Calendar = (function () {
        function Calendar(dateParser) {
            var injector = angular.element(document).injector(),
                $rootScope = injector.get("$rootScope"),
                GillionLocationService = injector.get("GillionLocationService"),
                topWindow = GillionLocationService.getRealTopWindow(),
                topJq = topWindow.$,
                $topCompile = topJq(topWindow.document).injector().get('$compile');
            this.template = getTopJq()(calendarTemplate);
            this.element = $topCompile(this.template)($rootScope);
            GillionLocationService.createHtmltoTop(this.template[0]);
            this.calendarDateArr = new Array(42);
            this.format = "YYYY-MM-DD";
            this.yearPanePage = 0;
            this.yearPaneShowArr = new Array(10);
            this.datePane = this.element.find(".form-date-days");
            this.dateParser = dateParser;
            this.paneDisabled = function (date) {
                return false;
            };

            /*绑定全局点击事件 */
            initGlobalCalendarEvent.call(this);
        };

        /**
         * 清除脏日期数据，如只选择月份时，应删除天数，小时，分钟的数据
         */
        Calendar.prototype.clearDirtyDateTime = function () {
            if (this.selectedDate) {
                if (this.isOnlyMonthSelect()) {
                    this.selectedDate.setDate(1);
                    this.selectedDate.setHours(0);
                    this.selectedDate.setMinutes(0);
                    this.selectedDate.setSeconds(0);
                    this.selectedDate.setMilliseconds(0);
                } else {
                    if (!this.isShowTimeModule()) {
                        this.selectedDate.setHours(0);
                        this.selectedDate.setMinutes(0);
                        this.selectedDate.setSeconds(0);
                        this.selectedDate.setMilliseconds(0);
                    } else {
                        if (!this.isShowSecondDisplay()) {
                            this.selectedDate.setSeconds(0);
                            this.selectedDate.setMilliseconds(0);
                        } else {
                            this.selectedDate.setMilliseconds(0);
                        }
                    }
                }
            }

        };
        /*刷新日期 */

        Calendar.prototype.refresh = function (newDate, parasitic, selectedDate, format) {

            /*设置面板显示的日期 */
            var cellDate, dates, day, firstDay, i, j, k, l, lastDay, lastMonthLastDay, m, nextMonthDaySHow, ref, ref1,
                ref2, hasSelected = selectedDate != undefined;
            var $parse = angular.element(document).injector().get("$parse");
            if (angular.isDefined(newDate)) {
                this.date = newDate.getDate();
                this.month = newDate.getMonth() + 1;
                this.year = newDate.getFullYear();
                this.minute = newDate.getMinutes();
                this.hour = newDate.getHours();
                this.second = newDate.getSeconds();
                if (angular.isUndefined(selectedDate)) {
                    selectedDate = newDate;
                }
            }
            this.selectedDate = new Date(selectedDate);
            if (angular.isDefined(selectedDate)) {
                this.date = selectedDate.getDate();
                this.month = selectedDate.getMonth() + 1;
                this.year = selectedDate.getFullYear();
                this.minute = selectedDate.getMinutes() >= 10 ? "" + (selectedDate.getMinutes()) : "0" + (selectedDate.getMinutes());
                this.hour = selectedDate.getHours() >= 10 ? "" + (selectedDate.getHours()) : "0" + (selectedDate.getHours());
                this.second = selectedDate.getSeconds() >= 10 ? "" + (selectedDate.getSeconds()) : "0" + (selectedDate.getSeconds());
            }
            this.format = format || "YYYY-MM-DD";
            this.timeModuleDisplay = this.isShowTimeModule();
            this.secondDisplay = this.isShowSecondDisplay();

            /*设置控件寄生对象 */
            if (angular.isDefined(parasitic)) {
                this.parasitic = parasitic;
            }
            firstDay = new Date(this.year, this.month - 1, 1).getDay();
            lastDay = new Date(this.year, this.month, 0).getDate();
            dates = lastDay;

            /*日历面板显示数组 */

            /*1.获取上个月的数组数据 */
            lastMonthLastDay = new Date(this.year, this.month - 1, 0).getDate();
            for (i = k = ref = firstDay; ref <= 0 ? k < 0 : k > 0; i = ref <= 0 ? ++k : --k) {
                day = lastMonthLastDay - firstDay + i;
                cellDate = new Date(this.year, this.month - 2, day);
                this.calendarDateArr[i - 1] = {
                    date: cellDate,
                    day: day,
                    dateStr: $parse("date|dateFormatter:'YYYY-MM-DD'")({
                        "date": cellDate
                    })
                };
            }

            /*2.填充本月的数组数据 */
            j = firstDay;
            for (i = l = 0, ref1 = dates; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {
                cellDate = new Date(this.year, this.month - 1, i + 1);
                this.calendarDateArr[j] = {
                    date: cellDate,
                    day: i + 1,
                    dateStr: $parse("date|dateFormatter:'YYYY-MM-DD'")({
                        "date": cellDate
                    })
                };
                j++;
            }

            /*3.填充下月的数组数据 */
            nextMonthDaySHow = 42 - (dates + firstDay) + 1;
            for (i = m = 0, ref2 = nextMonthDaySHow; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {
                day = i + 1;
                cellDate = new Date(this.year, this.month, day);
                this.calendarDateArr[firstDay + dates + i] = {
                    date: new Date(this.year, this.month, day),
                    day: day,
                    dateStr: $parse("date|dateFormatter:'YYYY-MM-DD'")({
                        "date": cellDate
                    })
                };
            }
            this.refreshCellClass(hasSelected);
            if (this.isOnlyMonthSelect()) {
                this.datePane.attr("disabled", "disabled");
            } else {

                this.datePane.removeAttr("disabled");
            }
        };


        /*刷新单元格样式 */

        Calendar.prototype.refreshCellClass = function (hasSelected) {
            var self = this,
                injector = angular.element(document).injector(),
                $parse = injector.get("$parse");
            injector.get("$timeout")(function () {
                var currentDate, currentDateStr, selectedDateStr;
                currentDate = new Date();
                currentDateStr = $parse("date|dateFormatter:'YYYY-MM-DD'")({
                    "date": currentDate
                });
                selectedDateStr = $parse("date|dateFormatter:'YYYY-MM-DD'")({
                    "date": self.selectedDate
                });
                self.datePane.find("[date-str]").removeAttr("selected");
                self.datePane.find("[today]").removeAttr("today");
                if (!self.isOnlyMonthSelect()) {
                    if (currentDateStr) {
                        self.datePane.find("[date-str=" + currentDateStr + "]").attr("today", "today");
                    }
                    if (selectedDateStr && hasSelected) {
                        self.datePane.find("[date-str=" + selectedDateStr + "]").attr("selected", "selected");
                    }
                }
            });
        };


        /*显示年面板 */

        Calendar.prototype.showYearPane = function () {
            var i, k;
            var year = parseInt(this.year, 10);
            if (year >= 1900) {
                for (i = k = 1; k < 6; i = ++k) {
                    this.yearPaneShowArr[5 - i] = year - i;
                    this.yearPaneShowArr[5 + i - 1] = year + i;
                }
            }
            this.yearPaneStyle = {
                "display": "block"
            };
        };


        /*是否显示时间输入模块 */

        Calendar.prototype.isShowTimeModule = function () {
            return /((H+)|(h+))/.test(this.format);
        };

        /*是否显示秒输入模块 */
        Calendar.prototype.isShowSecondDisplay = function () {
            return /(s+)/.test(this.format);
        };


        /*是否为24小时制 */

        Calendar.prototype.isHour24 = function () {

            /*判断是否是24小时制 */
            return /(H+)/.test(this.format);
        };


        /*隐藏年份选择面板 */

        Calendar.prototype.hideYearPane = function () {
            this.yearPaneStyle = {};
            this.yearPanePage = 0;
            this.yearPaneShowArr = [];
        };

        Calendar.prototype.getStyle = function (element, att) {
            if (window.getComputedStyle) {
                return window.getComputedStyle(element)[att];
            } else {
                return element.currentStyle[att];
            }
        };

        /*显示日历面板 */

        Calendar.prototype.showCalendar = function ($element) {
            var elementWidth = $element[0].offsetWidth,
                calendarWidth = this.element[0].offsetWidth || parseInt(this.getStyle(this.element[0], "width") ||
                    this.element[0].currentStyle.width, 10),
                calendarHeight = this.element[0].offsetHeight || parseInt(this.getStyle(this.element[0], "height") ||
                    this.element[0].currentStyle.height, 10);

            var GillionLocationService = angular.element(document).injector().get("GillionLocationService");
            var location = GillionLocationService.calculateLocation(this.parasitic);
            var docWindow = GillionLocationService.getTopWindow(window);
            if (location.right > calendarWidth) {
                this.element.css("left", location.left);
            } else {
                this.element.css("left", location.left - (calendarWidth - elementWidth));
            }
            if (location.bottom > calendarHeight &&
                (location.top + this.parasitic[0].offsetHeight + calendarHeight) < docWindow.document.documentElement.clientHeight) {
                this.element.css("top", location.top + this.parasitic[0].offsetHeight - 1);
            } else {
                this.element.css("top", location.top - calendarHeight - 2);
            }
            //this.element.css("top", location.top + this.parasitic[0].offsetHeight);
            this.calendarStyle = {
                "display": "block"
            };

            this.element.css("display", "block");
            this.parasitic && this.parasitic.children('input').addClass('is-show-menu');
        };


        /*隐藏日历面板 */

        Calendar.prototype.hideCalendar = function () {
            this.calendarStyle = {};
            //this.parasitic = undefined;
            this.parasitic && this.parasitic.children('input').removeClass('is-show-menu');
        };


        /*上一月事件 */

        Calendar.prototype.prevMonth = function () {
            var currentSelectDay = this.selectedDate.getDate();
            //获取上个月的最后一天
            var lastMonthLastDay = new Date(this.year, this.month - 1, 0).getDate();
            this.month = this.month - 1;
            if (this.month < 1) {
                this.month = 12;
                this.year = parseInt(this.year, 10) - 1;
            }
            if (this.selectedDate === void 0) {
                this.selectedDate = new Date(this.year, this.month - 1);
            } else {
                if (currentSelectDay > lastMonthLastDay) {
                    this.selectedDate.setDate(lastMonthLastDay);
                }
                this.selectedDate.setYear(this.year);
                this.selectedDate.setMonth(this.month - 1);
            }
            this.refresh(void 0, this.parasitic, this.selectedDate, this.format);
            this.clearDirtyDateTime();
            ///if (this.isOnlyMonthSelect()) {
            //this.confirmCallBack.call(this, this.selectedDate);
            //}
        };


        /*下一月事件 */

        Calendar.prototype.nextMonth = function () {
            var currentSelectDay = this.selectedDate.getDate();
            //获取下个月的最后一天
            var nextMonthLastDay = new Date(this.year, this.month + 1, 0).getDate();
            this.month = this.month + 1;
            if (this.month > 12) {
                this.month = 1;
                this.year = parseInt(this.year, 10) + 1;
            }
            if (this.selectedDate === void 0) {
                this.selectedDate = new Date(this.year, this.month - 1);
            } else {
                if (currentSelectDay > nextMonthLastDay) {
                    this.selectedDate.setDate(nextMonthLastDay);
                }
                this.selectedDate.setYear(this.year);
                this.selectedDate.setMonth(this.month - 1);
            }
            this.refresh(void 0, this.parasitic, this.selectedDate, this.format);
            this.clearDirtyDateTime();
            //if (this.isOnlyMonthSelect()) {
            //this.confirmCallBack.call(this, this.selectedDate);
            //}
        };


        /*年份选择上一页 */

        Calendar.prototype.prevYearPage = function () {
            var i, k, l, lastPageMinYear;
            var year = parseInt(this.year, 10);
            if (year >= 1900) {
                this.yearPanePage = this.yearPanePage - 1;
                if (this.yearPanePage === 0) {
                    for (i = k = 1; k < 6; i = ++k) {
                        this.yearPaneShowArr[5 - i] = year - i;
                        this.yearPaneShowArr[5 + i - 1] = year + i;
                    }
                } else {
                    lastPageMinYear = this.yearPaneShowArr[0];
                    for (i = l = 0; l < 10; i = ++l) {
                        this.yearPaneShowArr[9 - i] = lastPageMinYear - 1 - i;
                    }
                }
            }

        };


        /*年份选择下一页 */

        Calendar.prototype.nextYearPage = function () {
            var i, k, l, lastPageMaxYear;
            this.yearPanePage = this.yearPanePage + 1;
            var year = parseInt(this.year, 10);
            if (year >= 1900) {
                if (this.yearPanePage === 0) {
                    for (i = k = 1; k < 6; i = ++k) {
                        this.yearPaneShowArr[5 - i] = year - i;
                        this.yearPaneShowArr[5 + i - 1] = year + i;
                    }
                } else {
                    lastPageMaxYear = this.yearPaneShowArr[9];
                    for (i = l = 0; l < 10; i = ++l) {
                        this.yearPaneShowArr[i] = lastPageMaxYear + 1 + i;
                    }
                }
            }

        };


        /*选择年份 */

        Calendar.prototype.selectYear = function (year) {
            this.year = parseInt(year, 10);
            this.selectedDate.setFullYear(this.year);
            this.hideYearPane();
            this.refresh(void 0, this.parasitic, this.selectedDate, this.format);
            this.clearDirtyDateTime();
            this.confirmCallBack.call(this, this.selectedDate);
        };

        Calendar.prototype.typeYearPress = function ($event) {
            var keyCode = $event.keyCode, charCode = $event.charCode;
            var isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
            if (isFireFox) {
                if (keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            } else {
                if (!((keyCode > 47 && keyCode < 58) || keyCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            }
            if (this.yearKeyFlag) {
                $event.preventDefault();
            } else {
                this.yearKeyFlag = true;
            }
        };
        /*输入年份 */

        Calendar.prototype.typeYear = function ($event) {
            var element, i, k, pos, target, value;
            target = $event.srcElement || $event.target;
            element = getTopJq()(target);
            value = element.val();
            this.yearKeyFlag = false;
            if (value) {
                pos = CursorPositionUtil.getPosition(element);
                if (/^\d.*$/.test(value)) {
                    this.year = parseInt(value, 10);
                } else {
                    CursorPositionUtil.removePositionChar(element, pos);
                    value = element.val();
                    this.year = parseInt(value, 10);
                }
                this.yearPanePage = 0;
                if (this.year > 10000) {
                    this.year = parseInt(this.year / 10, 10);
                }
                if (this.year >= 1900) {
                    for (i = k = 1; k < 6; i = ++k) {
                        this.yearPaneShowArr[5 - i] = this.year - i;
                        this.yearPaneShowArr[5 + i - 1] = this.year + i;
                    }
                    this.selectedDate.setFullYear(this.year);
                    this.clearDirtyDateTime();
                    this.refresh(void 0, this.parasitic, this.selectedDate, this.format);
                    this.confirmCallBack.call(this, this.selectedDate);
                }
            }
        };


        /*小时输入框，焦点移开事件 */

        Calendar.prototype.confirmHour = function ($event) {
            var element, value;
            element = getTopJq()($event.srcElement || $event.target);
            value = parseInt(element.val(), 10);
            if (isNaN(value)) {
                value = 0;
            }
            value = value >= 10 ? "" + value : "0" + value;
            this.hour = value;
            this.selectedDate.setHours(value);
            this.chooseDateCallBack.call(this, this.selectedDate, true, { source: 'HourBlur' });
        };


        /*分钟输入框，焦点移开事件 */

        Calendar.prototype.confirmMinute = function ($event) {
            var element, value;
            element = getTopJq()($event.srcElement || $event.target);
            value = parseInt(element.val(), 10);
            if (isNaN(value)) {
                value = 0;
            }
            this.minute = value >= 10 ? "" + value : "0" + value;
            this.selectedDate.setMinutes(value);
            this.chooseDateCallBack.call(this, this.selectedDate, true, { source: 'MinuteBlur' });
        };


        /*秒输入框，焦点移开事件 */

        Calendar.prototype.confirmSecond = function ($event) {
            var element, value;
            element = getTopJq()($event.srcElement || $event.target);
            value = parseInt(element.val(), 10);
            if (isNaN(value)) {
                value = 0;
            }
            this.second = value >= 10 ? "" + value : "0" + value;
            this.selectedDate.setSeconds(value);
            this.chooseDateCallBack.call(this, this.selectedDate, true, { source: 'SecondBlur' });
        };


        /*小时输入防止按住重复输入 */

        Calendar.prototype.hourKeyPress = function ($event) {
            var keyCode = $event.keyCode, charCode = $event.charCode;
            var isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
            if (isFireFox) {
                if (keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            } else {
                if (!((keyCode > 47 && keyCode < 58) || keyCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            }
            if (this.hourKeyFlag) {
                $event.preventDefault();
            } else {
                this.hourKeyFlag = true;
            }
        };


        /*输入小时 */

        Calendar.prototype.hourKeyUp = function ($event) {
            var element, pos, value;
            element = getTopJq()($event.srcElement || $event.target);
            value = element.val();
            this.hourKeyFlag = false;
            if (!/(^\d*$)/.test(value)) {
                pos = CursorPositionUtil.getPosition(element);
                CursorPositionUtil.removePositionChar(element, pos);
                CursorPositionUtil.setPosition(element, pos - 1);
                value = element.val();
            }
            if (value.trim() === "") {
                return;
            }
            value = parseInt(value, 10);
            if (isNaN(value)) {
                value = 0;
            }
            if (value >= 10) {
                if (this.isHour24()) {
                    if (value > 23 || value < 0) {
                        pos = CursorPositionUtil.getPosition(element);
                        CursorPositionUtil.removePositionChar(element, pos);
                        CursorPositionUtil.setPosition(element, pos - 1);
                    }
                } else {
                    if (value > 12 || value < 0) {
                        pos = CursorPositionUtil.getPosition(element);
                        CursorPositionUtil.removePositionChar(element, pos);
                        CursorPositionUtil.setPosition(element, pos - 1);
                    }
                }
                value = parseInt(element.val(), 10);

            }
            if (angular.isDefined(this.selectedDate)) {
                this.selectedDate.setHours(value);
            }
            this.clearDirtyDateTime();
            this.chooseDateCallBack.call(this, this.selectedDate, true, { source: 'HourInput' });
            element.val(value);
        };


        /*输入分钟 */

        Calendar.prototype.minuteKeyUp = function ($event) {
            var element, pos, value;
            element = getTopJq()($event.srcElement || $event.target);
            value = element.val();
            this.minuteKeyFlag = false;
            if (!/(^\d*$)/.test(value)) {
                pos = CursorPositionUtil.getPosition(element);
                CursorPositionUtil.removePositionChar(element, pos);
                CursorPositionUtil.setPosition(element, pos - 1);
                value = element.val();
            }
            if (value.trim() === "") {
                return;
            }
            value = parseInt(value, 10);
            if (isNaN(value)) {
                value = 0;
            }
            if (value >= 10) {
                if (value > 59 || value < 0) {
                    pos = CursorPositionUtil.getPosition(element);
                    CursorPositionUtil.removePositionChar(element, pos);
                    CursorPositionUtil.setPosition(element, pos - 1);
                }
                value = parseInt(element.val(), 10);
            }
            if (angular.isDefined(this.selectedDate)) {
                this.selectedDate.setMinutes(value);

            }
            this.clearDirtyDateTime();
            this.chooseDateCallBack.call(this, this.selectedDate, true, { source: 'MinuteInput' });
            element.val(value);
        };

        /* 输入秒*/
        Calendar.prototype.secondKeyUp = function ($event) {
            var element, pos, value;
            element = getTopJq()($event.srcElement || $event.target);
            value = element.val();
            this.secondKeyFlag = false;
            if (!/(^\d*$)/.test(value)) {
                pos = CursorPositionUtil.getPosition(element);
                CursorPositionUtil.removePositionChar(element, pos);
                CursorPositionUtil.setPosition(element, pos - 1);
                value = element.val();
            }
            if (value.trim() === "") {
                return;
            }
            value = parseInt(value, 10);
            if (isNaN(value)) {
                value = 0;
            }
            if (value >= 10) {
                if (value > 59 || value < 0) {
                    pos = CursorPositionUtil.getPosition(element);
                    CursorPositionUtil.removePositionChar(element, pos);
                    CursorPositionUtil.setPosition(element, pos - 1);
                }
                value = parseInt(element.val(), 10);
            }
            if (angular.isDefined(this.selectedDate)) {
                this.selectedDate.setSeconds(value);

            }
            this.clearDirtyDateTime();
            this.chooseDateCallBack.call(this, this.selectedDate, true, { source: 'SecondInput' });
            element.val(value);
        };


        /*分钟输入防止按住重复输入 */

        Calendar.prototype.minuteKeyPress = function ($event) {
            var keyCode = $event.keyCode, charCode = $event.charCode;
            var isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
            if (isFireFox) {
                if (keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            } else {
                if (!((keyCode > 47 && keyCode < 58) || keyCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            }
            if (this.minuteKeyFlag) {
                $event.preventDefault();
            } else {
                this.minuteKeyFlag = true;
            }
        };


        /*秒输入防止按住重复输入 */

        Calendar.prototype.secondKeyPress = function ($event) {
            var keyCode = $event.keyCode, charCode = $event.charCode;
            var isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
            if (isFireFox) {
                if (keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            } else {
                if (!((keyCode > 47 && keyCode < 58) || keyCode === 32)) {
                    $event.preventDefault();
                    return;
                }
            }
            if (this.secondKeyFlag) {
                $event.preventDefault();
            } else {
                this.secondKeyFlag = true;
            }
        };


        /*选择日期 */

        Calendar.prototype.chooseDate = function () {
            var arg;
            var hide = true;
            if (arguments.length >= 2 && (typeof arguments[0] === 'boolean')) {
                hide = arguments[0];
            }
            arg = Array.prototype.pop.call(arguments);
            if (angular.isFunction(arg)) {
                this.chooseDateCallBack = arg;
            }
            if (angular.isDate(arg)) {
                if (this.isOnlyMonthSelect()) {
                    return;
                }
                arg.setHours(this.hour);
                arg.setMinutes(this.minute);
                arg.setSeconds(this.second);
                this.selectedDate = arg;
                this.date = this.selectedDate.getDate();
                this.month = this.selectedDate.getMonth() + 1;
                this.year = this.selectedDate.getFullYear();
                this.selectedDate = arg;
                this.clearDirtyDateTime();
                this.chooseDateCallBack.call(this, this.selectedDate, false, { source: 'DateChoose' });
                this.refreshCellClass(true);
                this.hideYearPane();
                if (!this.timeModuleDisplay && hide) {
                    this.hideCalendar();
                }
            }
        };


        /*确定按钮点击事件 */

        Calendar.prototype.confirm = function () {
            var arg;
            var args = arguments;
            var hide = true;
            if (typeof arguments[0] === 'boolean') {
                hide = arguments[0];
                args = _.tail(arguments);
            }
            arg = Array.prototype.pop.call(arguments);
            if (angular.isFunction(arg)) {
                this.confirmCallBack = arg;
            } else {
                if (this.selectedDate) {
                    if (isNaN(this.selectedDate.getTime())) {
                        this.selectedDate = new Date();
                    }
                } else {
                    this.selectedDate = new Date();
                }
                this.selectedDate.setYear(this.year);
                this.selectedDate.setMonth(this.month - 1);
                this.selectedDate.setDate(this.date);
                this.selectedDate.setHours(this.hour);
                this.selectedDate.setMinutes(this.minute);
                this.selectedDate.setSeconds(this.second);
                this.clearDirtyDateTime();
                this.confirmCallBack.call(this, this.selectedDate);
                this.refreshCellClass(true);
                this.hideYearPane();
                if (hide) {
                    this.hideCalendar();
                }
            }
        };


        /*清除按钮点击事件 */
        Calendar.prototype.clear = function () {
            var arg;
            arg = arguments[0];
            if (angular.isFunction(arg)) {
                this.clearCallback = arg;
            } else {
                this.selectedDate = void 0;
                this.clearDirtyDateTime();
                this.clearCallback.call(this);
                this.refreshCellClass(true);
                this.hideYearPane();
                this.hideCalendar();
            }

        };


        /*是否只到月份选择 */

        Calendar.prototype.isOnlyMonthSelect = function () {
            return /^(y+|Y+)-(M+|m)$/.test(this.format);
        };


        /*设置选择日期 */

        Calendar.prototype.setSelectDate = function (date) {
            return this.refresh(date, this.parasitic, date, this.format);
        };

        /* 设置窗格置灰函数 */
        Calendar.prototype.setPaneDisabledFunc = function (func) {
            if (!_.isFunction(func)) return;
            this.paneDisabled = func;
        };

        Calendar.prototype.destroy = function () {
            angular.element(document).off("click");
            angular.element(document).off("mousedown");
            // if (window.parent != window) {
            //     getTopJq()(window.parent.document).off("click");
            // }
            var $rootScope = angular.element(document).injector().get("$rootScope");
            delete $rootScope.calendar;
            this.element.remove();
            for (var key in this) {
                delete this[key];
            }
        };

        return Calendar;

    })();
    return Calendar;
});
