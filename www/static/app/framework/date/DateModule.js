// Generated by CoffeeScript 1.9.3
define([
    "angular",
    "underscore",
    "framework/time/CursorPositionUtil",
    "framework/date/Calendar",
    "framework/utils/DBCUtils",
    "config.properties",
    "framework/utils/UtilsModule",
    "framework/control/GillionControlDirectiveModule",
    "framework/tabindex/TabindexModule",
    "framework/msg/GillionMsgModule",

], function (angular, _, CursorPositionUtil, Calendar, DBCUtils, globalConfig) {
    var DateHandle, DateModule, dateParser, ngModelListener, timeRegExp;
    DateModule = angular.module("DateModule", ["TabindexModule", "GillionControlDirectiveModule", "UtilsModule", "GillionMsgModule"]);
    timeRegExp = /(\d{4})-(\d{1,2})-(\d{1,2})?(.*)/;
    dateParser = function (value) {
        var currentDate, dateInfos, day, hour, minute, second, month, timeInfos, timeStr, year;
        currentDate = new Date();
        currentDate.setDate(1);
        if (!value) {
            value = '';
        }

        dateInfos = value.match(timeRegExp);
        if (dateInfos === null) {
            dateInfos = value.match(/(\d{4})-(\d{2})?(.*)/);
            if (dateInfos === null) {
                dateInfos = value.match(/(\d{4})?(.*)/);
                if (dateInfos === null) {
                    return currentDate;
                } else {
                    year = dateInfos[1];
                }
            } else {
                year = dateInfos[1];
                month = dateInfos[2];
            }
        } else {
            year = dateInfos[1];
            month = dateInfos[2];
            day = dateInfos[3];
            timeStr = dateInfos[4];
        }
        year = parseInt(year, 10);
        month = parseInt(month, 10) - 1;
        day = parseInt(day, 10);
        if (!isNaN(year)) {
            currentDate.setFullYear(year);
        }

        if (!isNaN(day)) {
            currentDate.setDate(day);
        }
        /*else {
            var lastMonthLastDay = new Date(year, month+1, 0).getDate();
            if (currentDate.getDate() > lastMonthLastDay)
                currentDate.setDate(1);
        }*/
        if (!isNaN(month)) {
            currentDate.setMonth(month);
        }
        //再次赋值，防止日期天数超出造成天数不正常
        if (!isNaN(day)) {
            currentDate.setDate(day);
        }
        if (day == 0) {
            currentDate.setMonth(month - 1);
            currentDate.setDate(new Date(year, month, 0).getDate())
        }
        if (day == 0 && month == 0) {
            currentDate.setFullYear(year - 1);
        }

        if (timeStr) {
            timeInfos = timeStr.split(":");
            hour = timeInfos[0];
            minute = timeInfos[1];
            second = timeInfos[2];
            if (hour) {
                hour = parseInt(hour);
                if (!isNaN(hour)) {
                    currentDate.setHours(hour);
                }
            } else {
                currentDate.setHours(0);
            }
            if (minute) {
                minute = parseInt(minute);
                if (!isNaN(minute)) {
                    currentDate.setMinutes(minute);
                }
            } else {
                currentDate.setMinutes(0);
            }
            if (second) {
                second = parseInt(second);
                if (!isNaN(second)) {
                    currentDate.setSeconds(second);
                }
            } else {
                currentDate.setSeconds(0);
            }
            currentDate.setMilliseconds(0);
        } else {
            currentDate.setHours(0);
            currentDate.setMinutes(0);
            currentDate.setSeconds(0);
            currentDate.setMilliseconds(0);
        }

        return currentDate;
    };
    ngModelListener = function ($ngModel, value) {
        if (!angular.isDate(value)) {
            if (value !== "") {
                value = dateParser(value);
                var format = this.format;
                if (format) {
                    if (format.indexOf("yyyy") == -1) value.setFullYear(0);
                    if (format.indexOf("MM") == -1) value.setMonth(1);
                    if (format.indexOf("dd") == -1) value.setDate(1);
                    if (format.indexOf("hh") == -1 && format.indexOf("HH") == -1) value.setHours(0);
                    if (format.indexOf("mm") == -1) value.setMinutes(0);
                    if (format.indexOf("ss") == -1) value.setSeconds(0);
                }
            } else {
                value = void 0;
            }
        }
        if (angular.isDefined($ngModel)) {
            if ($ngModel.$viewValue - value != 0) {
                $ngModel.$setViewValue(value);
                $ngModel.$render();
            }
        }
    };

    var DateCompensater = {
        compensateYear: function (value, format) {
            while (value.match(/[^(\d| |:|\-)]/)) {
                value = value.replace(/[^(\d| |:|\-)]/, '');
            }
            value = value.trim();
            if (value.length === 0) {
                return "";
            }
            if (/^\d{3} |\d{2}|\d{1}$/.test(value)) {
                while (value.length < 4) {
                    value += "0";
                }
            }
            return value.substr(0, 4) + DateCompensater.compensateMonth(value.substr(4, value.length), format);
        },
        compensateMonth: function (value, format) {
            if (value.trim().length === 0) {
                value = "-";
            }
            if (/^(-\d{1})$/.test(value)) {
                value = value.charAt(1) === '0' ? value + "1" : "-0" + value.charAt(1);
            }

            if (/^(-)$/.test(value)) {
                value += "01";
            }

            return value.substr(0, 3) + DateCompensater.compensateDay(value.substr(3, value.length), format);
        },
        compensateDay: function (value, format) {
            if (format == "yyyy-MM") {
                return "";
            }
            if (value.trim().length === 0) {
                value = "-";
            }
            if (/^(-\d{1})$/.test(value)) {
                value = value.charAt(1) === '0' ? value + "1" : "-0" + value.charAt(1);
            }

            if (/^(-)$/.test(value)) {
                value += "01";
            }
            return value.substr(0, 3) + DateCompensater.compensateHour(value.substr(3, value.length), format);
        },
        compensateHour: function (value, format) {
            if (format === "yyyy-MM-dd" || format === "yyyy-MM") {
                return "";
            }
            if (value.trim().length === 0) {
                value = " ";
            }
            if (/^(\d{1})$/.test(value)) {
                value = " 0" + value.charAt(1);
            }
            if (/^(\s)$/.test(value)) {
                value += "00";
            }
            return value.substr(0, 3) + DateCompensater.compensateMinute(value.substr(3, value.length), format);
        },
        compensateMinute: function (value, format) {
            if (value.trim().length === 0) {
                value = ":";
            }
            if (/^(\:\d{1})$/.test(value)) {
                value = ":0" + value.charAt(1);
            }
            if (/^(\:)$/.test(value)) {
                value += "00";
            }
            return value;
        }
    };
    DateHandle = {
        handleYear: function (value, format) {
            if (/(\d{4}(.*))/.test(value)) {
                year = value.substr(0, 4);
                if (year === "0000") {
                    return year;
                }
            }

            if (/(\d{5}?(.*))/.test(value)) {
                value = value.substr(0, 4) + "-" + value.substr(4, 1);
            }
            value = value.replace(/(\d{2,4})([^0-9]*)?(.*)/, function () {
                var monthStr, year, yearSeparate;
                year = arguments[1];
                yearSeparate = arguments[2];
                monthStr = arguments[3];

                if (yearSeparate === "-") {

                    /*判断year的大小，自动填充 */
                    if (year.length === 1) {
                        year = "200" + year;
                    }
                    if (year.length === 2) {
                        year = "20" + year;
                    }
                    if (year.length === 3) {
                        year = "2" + year;
                    }
                    if (monthStr) {
                        monthStr = DateHandle.handleMonth(monthStr, format, parseInt(year));
                    }
                    return "" + year + yearSeparate + monthStr;
                } else {
                    return year;
                }
            });
            return value;
        },
        handleMonth: function (value, format, year) {
            var isOnlyMonthType;
            if (/(\d{2}(.*))/.test(value)) {
                var month = value.substr(0, 2);
                if (month === "00") {
                    return month;
                }
            }
            if (!/(d+)|(D+)/.test(format)) {
                isOnlyMonthType = true;
            }
            if (/(^\d{3}$)/.test(value)) {
                value = value.substr(0, 2) + "-" + value.substr(2, 1);
            }
            if (/(^\d{2}[^0-9]\d{3}$)/.test(value)) {
                if (!/(h+)|(H+)/.test(format)) {
                    value = value.substr(0, 5);
                } else {
                    value = value.substr(0, 5) + " " + value.substr(5, 1);
                }
            }
            value = value.replace(/(\d{1,2})([^0-9]*)?(.*)/, function () {
                var dayStr, month, monthNum, monthSeparate;
                month = arguments[1];
                monthSeparate = arguments[2];
                dayStr = arguments[3];
                if (dayStr) {
                    monthNum = parseInt(month, 10);
                    if (month.length === 2) {
                        if (monthNum > 12) {
                            monthNum = parseInt(monthNum / 10, 10);
                        }
                    }
                    dayStr = monthSeparate + DateHandle.handleDay(dayStr, format, monthNum, year);
                } else {
                    dayStr = monthSeparate;
                }
                if (isOnlyMonthType) {
                    dayStr = "";
                }
                if (monthSeparate === "-") {
                    if (month.length === 1) {
                        if (month === "0") {
                            return "01" + dayStr;
                        } else {
                            return month + dayStr;
                            //return "0" + month + dayStr;
                        }
                    } else {
                        monthNum = parseInt(month, 10);
                        if (monthNum > 12) {
                            month = "0" + (parseInt(monthNum / 10, 10));
                        }
                        return "" + month + dayStr;
                    }
                } else {
                    monthNum = parseInt(month, 10);
                    if (monthNum > 12) {
                        month = "" + (parseInt(monthNum / 10, 10));
                    }
                    return "" + month;
                }
            });
            return value;
        },

        /*处理日期中的天数输入 */
        handleDay: function (value, format, month, year) {
            value = value.replace(/(\d{1,2})([^0-9]*)?(.*)/, function () {
                /*获取本月最后一天 */
                var date, day, dayNum, daySeparate, maxDay, timeStr;
                if (/(\d{2}(.*))/.test(value)) {
                    var day = value.substr(0, 2);
                    if (day === "00") {
                        return day;
                    }
                }
                maxDay = new Date(year, month, 0).getDate();
                day = arguments[1];
                daySeparate = arguments[2];
                timeStr = arguments[3];
                if (timeStr) {
                    timeStr = DateHandle.handleHour(timeStr, format);
                }
                dayNum = parseInt(day, 10);
                if (daySeparate === " ") {
                    if (day.length === 1) {
                        if (day === "0") {
                            return "01" + daySeparate + timeStr;
                        } else {
                            return day + daySeparate + timeStr;
                            //return "0" + day + daySeparate + timeStr;
                        }
                    } else {
                        if (dayNum > maxDay) {
                            day = "" + (parseInt(dayNum / 10, 10));
                        }
                        return "" + day + daySeparate + timeStr;
                    }
                } else {
                    if (dayNum > maxDay) {
                        day = "" + (parseInt(dayNum / 10, 10));
                    }
                    return "" + day;
                }
            });
            return value;
        },

        /*处理日期中的小时输入 */
        handleHour: function (value, format) {
            if (/(^\d{3}$)/.test(value)) {
                value = value.substr(0, 2) + ":" + value.substr(2, 1);
            }
            value = value.replace(/(\d{1,2})([^0-9]*)?(.*)/, function () {
                var hour, hourNum, hourSeparate, minuteStr;
                hour = arguments[1];
                hourSeparate = arguments[2];
                minuteStr = arguments[3];
                if (minuteStr) {
                    minuteStr = DateHandle.handlerMinute(minuteStr);
                }
                if (hourSeparate === ":") {
                    if (hour.length === 1) {
                        return "0" + hour + hourSeparate + minuteStr;
                    } else {
                        hourNum = parseInt(hour, 10);
                        if (/(H+)/.test(format)) {
                            if (hourNum > 23) {
                                hour = "0" + parseInt(hourNum / 10, 10);
                            }
                        } else {
                            if (hourNum > 11) {
                                hour = "0" + parseInt(hourNum / 10, 10);
                            }
                        }
                        return "" + hour + hourSeparate + minuteStr;
                    }
                } else {
                    if (hour.length === 1) {
                        return "" + hour;
                    } else {
                        hourNum = parseInt(hour, 10);
                        if (/(H+)/.test(format)) {
                            if (hourNum > 23) {
                                hour = "0" + parseInt(hourNum / 10, 10);
                            }
                        } else {
                            if (hourNum > 11) {
                                hour = "0" + parseInt(hourNum / 10, 10);
                            }
                        }
                    }
                    return hour;
                }
            });
            return value;
        },

        /*处理日期中的分钟输入 */
        handlerMinute: function (value) {
            value = value.replace(/(\d{1,2})([^0-9]*)?(.*)/, function () {
                var minute, minuteNum, minuteSeparate, secondStr;
                minute = arguments[1];
                minuteSeparate = arguments[2];
                secondStr = arguments[3];
                if (secondStr) {
                    secondStr = DateHandle.handlerSecond(secondStr);
                }
                if (minuteSeparate === ":") {
                    if (minute.length === 1) {
                        return "0" + minute + minuteSeparate + secondStr;
                    } else {
                        minuteNum = parseInt(minute, 10);
                        if (minuteNum > 59) {
                            return "0" + (parseInt(minute / 10, 10)) + minuteSeparate + secondStr;
                        }
                        return "" + minute + minuteSeparate + secondStr;
                    }
                } else {
                    if (minute.length === 1) {
                        return "" + minute;
                    } else {
                        minuteNum = parseInt(minute, 10);
                        if (minuteNum > 59) {
                            minute = "0" + (parseInt(minute / 10, 10));
                        }
                        return "" + minute;
                    }
                }
            });
            return value;
        },
        /*处理日期中的秒输入 */
        handlerSecond: function (value) {
            value = value.replace(/(\d{1,2})([^0-9]*)?(.*)/, function () {
                var second, secondNum;
                second = arguments[1];
                if (second.length === 1) {
                    return "" + second;
                } else {
                    secondNum = parseInt(second, 10);
                    if (secondNum > 59) {
                        second = "0" + (parseInt(second / 10, 10));
                    }
                }
                return "" + second;
            });
            return value;
        },

        handlerFull: function (value) {
            value = value.replace(/-/g, "").replace(/\//g, "").replace(/ /g, "").replace(/:/g, "");
            if (value.length != 4 && value.length != 6 && value.length != 8 && value.length != 10 && value.length != 12 && value.length != 14) return false;

            var year = parseInt(value.substr(0, 4)),
                month = 0, day = 0, hour = 0, minute = 0, second = 0;

            if (value.length > 4) month = parseInt(value.substr(4, 2));
            if (value.length > 6) day = parseInt(value.substr(6, 2));
            if (value.length > 8) hour = parseInt(value.substr(8, 2));
            if (value.length > 10) minute = parseInt(value.substr(10, 2));
            if (value.length > 12) second = parseInt(value.substr(12, 2));

            if (year < 1900) return false;
            if (month < 0 || month > 12) return false;
            var maxDay = new Date(year, month, 0).getDate();
            if (day < 0 || day > maxDay) return false;
            if (hour < 0 || hour > 24) return false;
            if (minute < 0 || minute > 60) return false;
            if (second < 0 || second > 60) return false;
            var date = year.toString();

            if (month > 0) date += "-" + (month > 9 ? month.toString() : "0" + month.toString())
            if (day > 0) date += "-" + (day > 9 ? day.toString() : "0" + day.toString());
            if (hour > 0) date += " " + (hour > 9 ? hour.toString() : "0" + hour.toString());
            if (minute > 0) date += ":" + (minute > 9 ? minute.toString() : "0" + minute.toString());
            if (second > 0) date += ":" + (second > 9 ? second.toString() : "0" + second.toString());
            return date;
        }
    };

    DateModule.directive("gDate", function ($parse, $compile, $rootScope, $tabindex, $timeout, GillionMsgService) {
        var template;
        template = '<div class="form-date" verify-target ng-style="dateWidgetStyle" outer-container>\n    <input type="text"\n           outer-container\n           ng-dblclick="selectInputText(this)"\n           ng-disabled="ngDisabled||disabled"\n           ng-keypress="dateKeyPress($event)"\n           ng-keyup="dateKeyUp($event)"\n           ng-click="showCalendar()"\n           ng-focus="showCalendarOnFocus($event)"\n           ng-blur="confirmDate($event)"\n\n           class="form-text date-text-input" ondrop="return false;" ondragstart="return false">\n    <a type="button" class="btn">\n        <i class="fi fi-date" ng-click="showCalendar()"></i>\n    </a>\n</div>';
        return {
            template: template,
            replace: true,
            restrict: "E",
            scope: {
                format: "@",
                defaultDate: "@",
                defaultSelectDate: "@",
                disabled: "=",
                cssStyle: "=",
                ngDisabled: "=",
                beforeSelect: "&",
                afterSelect: "&",
                showOnFocus: "@", //是否在回车跳转或tab跳转时显示
                minDate: "&",
                maxDate: "&",
                readonly: "@"
            },
            require: "^?ngModel",
            controller: function ($scope, $element) {
                var inputElement;
                inputElement = $element.find("input");
                /*为控件注册tabIndex服务 */
                $tabindex.register(inputElement, $element);
            },
            link: function ($scope, $element, $attr, $ctrl) {
                var $ngModel = $ctrl,
                    dateInputElement = $element.find(".date-text-input"),
                    defaultDate,
                    format = $scope.format || "yyyy-MM-dd",
                    selectedDate, //默认的选择时间
                    context = {
                        element: dateInputElement,
                    },
                    bindFocusHandler = function ($attr) {
                        if (angular.isUndefined($attr.showOnFocus)) {
                            if (globalConfig.controls.date && angular.isDefined(globalConfig.controls.date["showOnFocus"])) {
                                $attr.showOnFocus = globalConfig.controls.date["showOnFocus"];
                            } else {
                                $attr.showOnFocus = true; //默认为跳转即显示
                            }
                        }
                    },
                    copyAttribute = function ($element, targetElement) {
                        if (angular.isDefined($attr.name)) {
                            targetElement.attr("name", $attr.name);
                            $element.removeAttr("name");
                        }
                    },
                    getCalendar = function () {
                        if (angular.isUndefined($rootScope.calendar)) {
                            $rootScope.calendar = new Calendar(dateParser);
                        }
                        return $rootScope.calendar;
                    },
                    customDateWidgetStyle = function ($attr, $scope) {
                        if ($attr.width) {
                            $scope.dateWidgetStyle = {
                                width: $attr.width
                            };
                        }
                        if ($scope.cssStyle) {
                            return angular.extend($scope.dateWidgetStyle, $scope.cssStyle);
                        }
                    },
                    initShowDate = function ($scope) {
                        if (angular.isUndefined($scope.defaultDate)) {
                            //defaultDate = new Date();
                        } else {
                            if (angular.isNumber($scope.defaultDate)) {
                                defaultDate = new Date($scope.defaultDate);
                            }
                            if (angular.isDate($scope.defaultDate)) {
                                defaultDate = $scope.defaultDate;
                            }
                            if (angular.isString($scope.defaultDate)) {
                                defaultDate = dateParser($scope.defaultDate);
                            }
                        }

                        if (defaultDate) {
                            var dateStr = $parse("date|dateFormatter:'" + format + "'")({
                                "date": defaultDate
                            });
                            if (angular.isDefined($ngModel)) {
                                ngModelListener.call(this, $ngModel, dateStr);
                            } else {
                                dateInputElement.val(dateStr);
                            }
                        } else {
                            if (angular.isNumber($scope.defaultSelectDate)) {
                                defaultDate = new Date($scope.defaultSelectDate);
                            } else if (angular.isDate($scope.defaultSelectDate)) {
                                defaultDate = $scope.defaultSelectDate;
                            } else if (angular.isString($scope.defaultSelectDate) && $scope.defaultSelectDate != "") {
                                defaultDate = dateParser($scope.defaultSelectDate);
                            }
                        }
                    },
                    bindReadonly = function () {
                        if ($scope.readonly == true || $scope.readonly == "true")
                            dateInputElement.attr("readonly", "true");
                    };

                if ($attr.ngModel) {
                    dateInputElement.attr("id", $attr.ngModel);
                }

                $scope.disabledSelectSource = $attr.disabledSelectSource ? $attr.disabledSelectSource.split(',') : [];

                getCalendar();

                //绑定focus事件处理方式
                bindFocusHandler($attr);

                //设置只读
                bindReadonly($scope);

                //拷贝文本框属性
                copyAttribute($element, dateInputElement);

                if ($attr.disabled === 'disabled') {
                    $scope.disabled = true;
                }

                customDateWidgetStyle($attr, $scope);

                /*初始化日历，打开时，默认的值，若不存在，则默认打开日历时显示当前日期 */
                initShowDate($scope);


                var setSelectDate = function (date) {
                    selectedDate = date;
                };
                var getSelectDate = function () {
                    return selectedDate;
                }
                /*将ng-model的值绑定到日期文本域上 */
                if (angular.isDefined($ngModel)) {
                    $ngModel.$render = function () {
                        var dateStr,
                            dateInputEle = $element.find(".date-text-input"),
                            injector = angular.element(document).injector(),
                            $parse = injector.get("$parse");
                        if (angular.isDefined(this.$viewValue)) {

                            /*判断值类型，根据不同值类型，去实例化日期对象 */
                            if (angular.isNumber(this.$viewValue)) {
                                setSelectDate(new Date(this.$viewValue));
                            }
                            if (angular.isDate(this.$viewValue)) {
                                setSelectDate(this.$viewValue);
                            }
                            if (angular.isString(this.$viewValue)) {
                                if (this.$viewValue === "") {
                                    setSelectDate(undefined);
                                } else {
                                    if (this.$viewValue.indexOf("T") != -1) {
                                        var formatValue = $parse("date|dateFormatter:'" + format + "'")({
                                            "date": this.$viewValue
                                        });
                                        setSelectDate(dateParser(formatValue));

                                    } else {
                                        setSelectDate(dateParser(this.$viewValue));
                                    }

                                }
                            }

                            if (!this.$viewValue) {
                                setSelectDate(undefined);
                            }

                            /*设置文本框的值 */
                            dateStr = $parse("date|dateFormatter:'" + format + "'")({
                                "date": getSelectDate()
                            });
                            if (dateInputEle.val() != dateStr)
                                dateInputEle.val(dateStr);
                            if (angular.isString(this.$modelValue)) {
                                ngModelListener.call($scope, $ngModel, dateStr);
                            }
                        } else {
                            dateInputEle.val("");
                        }
                        //修复因类型原因，引起的校验问题
                        if (angular.isDefined(this.verify)) {
                            this.verify();
                        }
                    };
                }


                /*点击文本框事件，根据文本框的值重新刷新日历，并显示日历 */
                //var isShowCalendar = true;
                $scope.showCalendar = function (hidePanel) {
                    if (GillionMsgService.isUnderMasked($element[0])) {
                        return;
                    }
                    if (!this.disabled && !this.ngDisabled && $attr.disabled !== "disabled" && $attr.disabled !== "true") {
                        var minDate = this.minDate();
                        var maxDate = this.maxDate();

                        var disabledFunc = function (date) {
                            if (minDate == undefined && maxDate == undefined) return false;

                            if (minDate != undefined) {
                                if (_.isString(minDate)) minDate = new Date(minDate);
                                if (minDate > date) return true;
                            }

                            if (maxDate != undefined) {
                                if (_.isString(maxDate)) maxDate = new Date(maxDate);
                                if (maxDate < date) return true;
                            }
                            return false;
                        };
                        getCalendar().setPaneDisabledFunc(disabledFunc);
                        selectedDate = dateInputElement.val();
                        if (this.selectFlag) {
                            if (window.document.documentMode <= 9) {
                                var range = dateInputElement[0].createTextRange();
                                range.moveStart('character', dateInputElement.val().length);
                                range.collapse(true);
                                range.select();
                            } else {
                                dateInputElement.focus();
                            }
                        } else {
                            dateInputElement.select();
                            this.selectFlag = true;
                        }
                        /*是否有效日期，若为无效日期，则弹出的日历显示默认值 */
                        var showInitDate = angular.isDefined(defaultDate) ? defaultDate : new Date();
                        /*判断文本框内是X否有值，若有，则将文本框内的值初始化到日历选择页面上，若没有，则以初始值进行显示 */
                        if (selectedDate) {
                            selectedDate = dateParser(selectedDate);
                            if (isNaN(selectedDate.getTime())) {
                                getCalendar().refresh(showInitDate, $element, void 0, format);
                            } else {
                                getCalendar().refresh(showInitDate, $element, selectedDate, format);
                            }
                        } else {
                            getCalendar().refresh(showInitDate, $element, showInitDate, format);
                        }
                        if (!hidePanel) getCalendar().showCalendar($element);

                        /*日期选择回调时间初始化 */
                        getCalendar().chooseDate(function (date, notFocus, extra) {
                            var $scope = angular.element($element).data().$isolateScope;
                            var beforeSelect = $scope.beforeSelect,
                                afterSelect = $scope.afterSelect,
                                dateStr = $parse("date|dateFormatter:'" + format + "'")({
                                    "date": date
                                });

                            if (extra && extra.source && $scope.disabledSelectSource && $scope.disabledSelectSource.indexOf(extra.source) !== -1) return;
                            if (angular.isFunction(beforeSelect)) {
                                if (beforeSelect({date:date}) === false) {
                                    return;
                                }
                            }

                            if (disabledFunc(date)) return;
                            if ($ngModel) {
                                ngModelListener.call(this, $ngModel, dateStr);
                            } else {
                                dateInputElement.val(dateStr);
                            }
                            if (angular.isFunction(afterSelect)) {
                                afterSelect({date:date});
                            }
                            if (!notFocus) {
                                if (window.document.documentMode <= 9) {
                                    var range = dateInputElement[0].createTextRange();
                                    range.moveStart('character', dateInputElement.val().length);
                                    range.collapse(true);
                                    range.select();
                                } else {
                                    dateInputElement.focus();
                                }
                            }
                        });

                        /*日期点击确认按钮后，值回写 */
                        getCalendar().confirm(function (date) {
                            var $scope = angular.element($element).data().$isolateScope;
                            var beforeSelect = $scope.beforeSelect,
                                afterSelect = $scope.afterSelect,
                                dateStr = $parse("date|dateFormatter:'" + format + "'")({
                                    "date": date
                                });

                            if (angular.isFunction(beforeSelect)) {
                                if (beforeSelect({date:date}) === false) {
                                    return;
                                }
                            }
                            if ($ngModel) {
                                ngModelListener.call(this, $ngModel, dateStr);
                            } else {
                                dateInputElement.val(dateStr);
                            }
                            if (angular.isFunction(afterSelect)) {
                                afterSelect({date:date});
                            }
                            if (window.document.documentMode <= 9) {
                                var range = dateInputElement[0].createTextRange();
                                range.moveStart('character', dateInputElement.val().length);
                                range.collapse(true);
                                range.select();
                            } else {
                                dateInputElement.focus();
                            }

                        });

                        /*日期点击清除时，值回填 */
                        getCalendar().clear(function () {
                            if ($ngModel) {
                                ngModelListener.call(this, $ngModel, "");
                            }
                            dateInputElement.val("");
                        });
                    }
                };

                $scope.showCalendarOnFocus = function (event) {
                    if ($attr.showOnFocus) {
                        this.showCalendar();
                    } else if (getCalendar().parasitic && getCalendar().parasitic !== $element && event.type != "focus") {
                        this.showCalendar(false);
                        /* $timeout(function () {
                            getCalendar().hideCalendar();
                        }); */
                    }
                };

                /*防止按住按键重复输入 */
                $scope.dateKeyPress = function ($event) {
                    var keyCode = $event.keyCode,
                        charCode = $event.charCode,
                        isFireFox = window.navigator.userAgent.indexOf("Firefox") != -1;
                    if (isFireFox) {
                        if(keyCode === 0 && !((charCode > 47 && charCode < 58) || charCode === 45 || (charCode === 58 && $event.shiftKey) || charCode === 32)) {
                            $event.preventDefault();
                            return;
                        }
                    } else {
                        if (!((keyCode > 47 && keyCode < 58) || keyCode === 45 || (keyCode === 58 && $event.shiftKey) || keyCode === 32)) {
                            $event.preventDefault();
                            return;
                        }
                    }
                    if (this.keyflag) {
                        $event.preventDefault();
                    } else {
                        this.keyflag = true;
                    }
                };

                /*日期格式控制 */
                $scope.dateKeyUp = function ($event) {
                    var element, nowLength, orginLength, pos, value, oldValue, keyCode;
                    element = angular.element($event.srcElement || $event.target);
                    oldValue = element.val();
                    value = DBCUtils.toCDB(oldValue);
                    pos = CursorPositionUtil.getPosition(element);
                    orginLength = value.length;
                    keyCode = $event.keyCode;

                    this.keyflag = false;
                    if ((keyCode === 9 && element.is(document.activeElement)) ||
                        $event.ctrlKey ||
                        _.contains([1, 2, 16, 17, 37, 38, 39, 40], keyCode)) {
                        return;
                    }

                    if (value.length && value.trim() === '') {
                        selectedDate = new Date();
                        getCalendar().setSelectDate(selectedDate);
                        getCalendar().confirm(false);
                        return;
                    }

                    if (value.length === 0) {
                        ngModelListener.call(this, $ngModel, value);
                        return;
                    }

                    if (globalConfig.controls.date.formatMode == "focus") return;
                    while (value.match(/[^(\d| |:|\-)]/)) {
                        value = value.replace(/[^(\d| |:|\-)]/, '');
                    }

                    value = DateHandle.handleYear(value, format);
                    nowLength = value.length;

                    var formatReg;
                    if (format.toLowerCase() === 'yyyy-mm') {
                        formatReg = /\d{4}-\d{2}/;
                    }
                    if (format.toLowerCase() === 'yyyy-mm-dd') {
                        formatReg = /\d{4}-\d{2}-\d{2}/;
                    }
                    if (format.toLowerCase() === 'yyyy-mm-dd hh:mm') {
                        formatReg = /\d{4}-\d{2}-\d{2} \d{2}:\d{2}/;
                    }

                    var tmp = value.substr(value.length - 2, 1);
                    if (value !== oldValue && _.contains(["-", ":", " "], tmp)) {
                        element.val(value);
                        CursorPositionUtil.setPosition(element, pos + nowLength - orginLength);
                    }
                    if (value === "") {
                        selectedDate = new Date();
                    } else {
                        selectedDate = dateParser(value);
                    }
                    if (!isNaN(selectedDate.getTime())) {
                        getCalendar().setSelectDate(selectedDate);
                    }
                    if (value === "") {
                        ngModelListener.call(this, $ngModel, value);
                        return;
                    }
                    if (formatReg.test(value) && formatReg.test(oldValue)) ngModelListener.call(this, $ngModel, value);
                };

                $scope.confirmDate = function ($event) {
                    var element, value;
                    element = angular.element($event.srcElement || $event.target);
                    value = element.val();

                    this.selectFlag = false;
                    if (globalConfig.controls.date.formatMode == "focus" && value != "") {
                        if (value.substr(0, 2) != "20" && value.substr(0, 2) != "19") value = new Date().getFullYear() + value;
                        var date = DateHandle.handlerFull(value);
                        if (date) {
                            //var len = value.length;
                            //if (len > 4) value = value.substr(0, 4) + "-" + value.substr(4);
                            value = date;
                        } else {
                            value = "";
                            element.val(value);
                            ngModelListener.call(this, $ngModel, value);
                            return;
                        }
                    } else {
                        value = DateCompensater.compensateYear(value, format);
                        if (value === "") {
                            if ($ngModel.$viewValue) ngModelListener.call(this, $ngModel, value);
                            return;
                        }
                    }

                    value = $parse("date|dateFormatter:'" + format + "'")({
                        "date": dateParser(value)
                    });
                    element.val(value);
                    if (value !== "") {
                        ngModelListener.call(this, $ngModel, value);
                    }
                };

                $scope.selectInputText = function (inputElement) {
                    dateInputElement.select();
                };

                angular.element(document).injector().get("$rootScope").$on("$destroy", function () {
                    dateInputElement = undefined;
                    $ngModel = undefined;
                    defaultDate = undefined;
                    format = undefined;
                    selectedDate = undefined;
                    var $rootScope = angular.element(document).injector().get("$rootScope");
                    if ($rootScope.calendar) {
                        getCalendar().destroy();
                    }
                });
            }
        };
    });
    return DateModule;
});