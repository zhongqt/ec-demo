// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define('framework/simplelist/SimpleListConstructor', ['angular'], function(angular) {

    /*列表模板 */
    var MutilSimpleList, NoBoxSimpleList, SimpleList, SimpleListFactory, SingleSimpleList, handleElementClass, template;
    //template = '<div class="list-box"> <div class="select-down" style="display:block"> <div class="select-down-boder">' +
    //'<g-simple-list-item ng-repeat=\"item in source\" value="{{valueGetter(item)}}" >{{displayGetter(item)}} </g-simple-list-item> ' +
    //'</div></div></div>';
    template = '<ul class="form-list"><g-simple-list-item ng-repeat=\"item in $source\" value="{{valueGetter(item)}}" text="{{displayGetter(item)}}"> </g-simple-list-item></ul>',

    /*简单列表 */
    SimpleList = (function() {

      /*简单列表构造器 */
      function SimpleList($scope1, $attrs1, $controller1,  itemList) {
        this.$scope = $scope1;
        this.$attrs = $attrs1;
        this.$controller = $controller1;
        this.itemList = itemList != null ? itemList : [];
        this.valueSeparator = $scope1.valueSeparator || ',';
      }


      SimpleList.prototype.transObjToArr = function(obj){
        var result = [];
        for(var prop in obj){
          var item = {};
          item.key = prop;
          item.value = obj[prop];
          result.push(item);
        }
        return result;
      }

      /*选择一项 */

      SimpleList.prototype.selectItem = function(item) {
        var self;
        self = this;
        if (item.isSelected()) {

          /*取消选择 */
          if (angular.isDefined(self.$attrs.onBeforeUnSelect)) {
            if (self.$scope.onBeforeUnSelect({
              list: self,
              item: item
            }) === false) {
              return;
            }
          }
          if (angular.isDefined(self.$attrs.onUnSelect)) {
            self.$scope.onUnSelect({
              list: self,
              item: item
            });
            item.unSelect();
            self.$scope.setModelValue(self.getSubmitValue());
            self.$scope.$apply();
            return ;
          }
        } else {
          /*选择一项 */
          if (angular.isDefined(self.$attrs.onBeforeSelect)) {
            if (self.$scope.onBeforeSelect({
              list: self,
              item: item
            }) === false) {
              return;
            }
          }
          if (angular.isDefined(self.$attrs.onSelect)) {

            self.$scope.onSelect({
              list: self,
              item: item
            });
          }
          self.clearSelect();
          item.select();
          self.$scope.setModelValue(self.getSubmitValue());
          self.$scope.$apply();
          return ;
        }
      };

      SimpleList.prototype.showSelect = function(value) {
        var self = this;
        if(value){

          var display = _.chain(self.itemList).filter(function(item){
            item.unSelect();
            return item.$attrs.value == value;
          }).map(function(item){
            return item.select();
          }).value();
        }else{
          angular.forEach(self.itemList,function(item){
            item.unSelect();
          });

        }
      };

      /*获取选择项 */

      SimpleList.prototype.getSelectedItems = function() {
        return _.chain(this.itemList).filter(function(item) {
          return item.isSelected();
        }).map(function(item) {
          return item.itemValue;
        }).value();
      };

      SimpleList.prototype.getSubmitValue = function() {
        var self, values;
        self = this;
        values = _.chain(this.itemList).filter(function(item) {
          return item.isSelected();
        }).map(function(item) {
          return item.$attrs.value;
        }).value();
        return values.join(self.$scope.valueSeparator);
      };


      /*获取所有项 */

      SimpleList.prototype.getItems = function() {
        return _(this.itemList).map(function(item) {
          return item.itemValue;
        });
      };


      /*清除选择 */

      SimpleList.prototype.clearSelect = function() {
        angular.forEach(this.itemList,function(item) {
          return item.unSelect();
        });
      };


      /*设置配置 */

      SimpleList.prototype.setOptions = function(options) {
        if (angular.isDefined(options.source)) {
          this.$scope.source = options.source;
        }
        if (angular.isDefined(options.sourceUrl)) {
          this.$scope.sourceUrl = options.sourceUrl;
        }
        if (angular.isDefined(options.listType)) {
          this.$scope.listType = options.listType;
        }
        if (angular.isDefined(options.displayExpress)) {
          this.$scope.displayExpress = options.displayExpress;
        }
        return this;
      };


      return SimpleList;

    })();

    /*没有选择框的列表 */
    NoBoxSimpleList = (function(superClass) {
      extend(NoBoxSimpleList, superClass);

      function NoBoxSimpleList($scope1, $attrs1, $controller1,  itemList) {
        this.$scope = $scope1;
        this.$attrs = $attrs1;
        this.$controller = $controller1;
        this.itemList = itemList != null ? itemList : [];
        NoBoxSimpleList.__super__.constructor.call(this, this.$scope, this.$attrs, this.$controller, this.itemList);
      }

      return NoBoxSimpleList;

    })(SimpleList);

    /*单选框列表 */
    SingleSimpleList = (function(superClass) {
      extend(SingleSimpleList, superClass);

      function SingleSimpleList($scope1, $attrs1, $controller1,  itemList) {
        this.$scope = $scope1;
        this.$attrs = $attrs1;
        this.$controller = $controller1;
        this.itemList = itemList != null ? itemList : [];
        SingleSimpleList.__super__.constructor.call(this, this.$scope, this.$attrs, this.$controller,this.itemList);
      }

      return SingleSimpleList;

    })(SimpleList);

    /*复选框列表 */
    MutilSimpleList = (function(superClass) {
      extend(MutilSimpleList, superClass);

      function MutilSimpleList($scope1, $attrs1, $controller, itemList) {
        var self;
        this.$scope = $scope1;
        this.$attrs = $attrs1;
        this.itemList = itemList != null ? itemList : [];
        MutilSimpleList.__super__.constructor.call(this, this.$scope, this.$attrs, this.$controller, this.itemList);
        self = this;
      }

      MutilSimpleList.prototype.selectItem = function(item) {
        var self = this;
        if (item.isSelected()) {

          /*取消选择 */
          if (angular.isDefined(self.$attrs.onBeforeUnSelect)) {
            if (self.$scope.onBeforeUnSelect({
              list: self,
              item: item
            }) === false) {
              return;
            }
          }
          if (angular.isDefined(self.$attrs.onUnSelect)) {
            self.$scope.onUnSelect({
              list: self,
              item: item
            });
            item.unSelect();
            self.$scope.setModelValue(self.getSubmitValue());
            self.$scope.$apply();
          }
        } else {

          /*选择一项 */
          if (angular.isDefined(self.$attrs.onBeforeSelect)) {
            if (self.$scope.onBeforeSelect({
              list: self,
              item: item
            }) === false) {
              return;
            }
          }
          if (angular.isDefined(self.$attrs.onSelect)) {
            self.$scope.onSelect({
              list: self,
              item: item
            });

          }
          item.select();
          self.$scope.setModelValue(self.getSubmitValue());
          self.$scope.$apply();
        }
      };

      MutilSimpleList.prototype.showSelect = function(value) {
        var self = this,
            valArray,
            display;
        if(value){
            valArray = value.split(self.valueSeparator);
            display = _.chain(self.itemList).filter(function(item){
              item.unSelect();
              var result = _(valArray).filter(function(val){
                return val == item.$attrs.value;
              });
            return result.length>0;
            }).map(function(item){
              return item.select();
            }).value();
        }else{
          angular.forEach(self.itemList,function(item){
            item.unSelect();
          });
        }
      };

      return MutilSimpleList;

    })(SimpleList);

    /*列表工厂 */
    SimpleListFactory = {
      createList: function($scope, $attrs, $controller) {
        var simpleList;
        switch ($scope.listType) {
          case "single":
            simpleList = new SingleSimpleList($scope, $attrs, $controller);
            break;
          case "multi":
            simpleList = new MutilSimpleList($scope, $attrs, $controller);
            break;
          default:
            simpleList = new NoBoxSimpleList($scope, $attrs, $controller);
            break;
        }
        return simpleList;
      }
    };

    /*处理element样式 */
    handleElementClass = function($element) {
      if ($element.attr("css-class")) {
        $element.addClass($element.attr("css-class"));
        return $element.removeAttr("css-class");
      }
    };

    /*列表指令构造 */
    return function($compile, $parse, $filter) {
      return {
        restrict: "E",
        template: template,
        replace: true,
        scope: {
          source: "=",
          listType: "@",
          displayExpress: "@",
          valueProp:"@",
          initCallback: "=",
          sourceUrl: "@",
          onBeforeSelect: "&",
          onSelect: "&",
          onBeforeUnSelect: "&",
          onUnSelect: "&",
          submitValueExpress: "@",
          valueSeparator: "@"
        },
        require: ["^?ngModel", "^?gSimpleList"],
        controller: function($scope, $element, $attrs) {
          var self;
          self = this;

          /*创建分组 */
          this.simpleList = SimpleListFactory.createList($scope, $attrs, this);
          return this.simpleList;
        },
        link: function($scope, $element, $attrs, $controllers) {



          /*1. 初始化submitValueExpress */
          var groupCtrl, listCtrl,ngModel;
          $scope.submitValueExpress = $scope.valueField || "value";
          $scope.submitValueGetter = $parse($scope.valueField);
          $scope.valueSeparator = $scope.valueSeparator || ",";
          ngModel = $controllers[0];
          listCtrl = $controllers[1];

          if(!angular.isArray($scope.source)){
            $scope.$source = listCtrl.transObjToArr($scope.source);
            $scope.valueProp = "value";
            $scope.displayExpress = "key";
          }else{
            $scope.$source = $scope.source;
          }

          var returnParamFn = function (arg) {
            return arg;
          };
          $scope.valueGetter = !!$scope.valueProp ? $parse($scope.valueProp) : returnParamFn;
          $scope.displayGetter = !!$scope.displayExpress ? $parse($scope.displayExpress) : returnParamFn;

          $scope.setModelValue = function(val){
            if(ngModel) {
              ngModel.$setViewValue(val);
            }
          };
          if(ngModel){
            ngModel.$formatters.push(function(value){
              ngModel.$setViewValue(value);
              listCtrl.showSelect(value);
            });
          }

          $scope.itemList = listCtrl.itemList;
          $scope.$watchCollection("itemList",function(){
            listCtrl.showSelect(ngModel.$modelValue);
          });

          //刷新数据源
          var flashFirst = false;
          $scope.$watchCollection("source",function(){
            if(!angular.isArray($scope.source)){
              $scope.$source = listCtrl.transObjToArr($scope.source);
            }else{
              $scope.$source = $scope.source;
            }

            if(flashFirst){
              $scope.itemList = [];
              listCtrl.itemList = [];
            }
            flashFirst =true;
          });

          /*2. 判断是否是分组列表 */
          //if (groupCtrl !== void 0 && groupCtrl !== null) {
          //  groupCtrl.groupList.simpleLists.push(listCtrl.simpleList);
          //}
          handleElementClass($element);
          if (angular.isDefined($attrs.width)) {
            $element.css("width", $attrs.width);
          }

          /*3. 触发回调函数 */
          if (angular.isFunction($scope.initCallback)) {
            $scope.initCallback(listCtrl.simpleList);
          }

          /*4. 监听数据变化,进行视图重新渲染 */
          //return $scope.$watch("source", (function(newValue) {
          //  $timeout(function() {
          //    $scope.dataSource = [];
          //    return listCtrl.simpleList.itemList = [];
          //  });
          //  return $timeout(function() {
          //    return $scope.dataSource = newValue;
          //  });
          //}), true);
        }
      };
    };
  });

}).call(this);
