// Generated by CoffeeScript 1.9.3

/*分组列表模块构造器 */

(function() {
  define('framework/simplelist/GroupListConstructor', ['angular'], function(angular) {

    /*模板 */
    var GroupList, _organizeDataByGroup, template;
    template = "<div class=\"simple-list\"> <ul> <li ng-repeat=\"(key, items) in newDataMap\"> <div> <strong ng-bind=\"key\"></strong> </div> <g-simple-list on-before-select=\"onBeforeSelectProxy(item)\" on-select=\"onSelectProxy(item)\" on-before-un-select=\"onBeforeUnSelectProxy(item)\" on-un-select=\"onUnSelectProxy(item)\" list-type=\"{{listType}}\" data-source=\"items\" text-property=\"{{textProperty}}\" > </g-simple-list> </li> </ul> </div> ";

    /*分组列表对象 */
    GroupList = (function() {

      /*GroupList构造器 */
      function GroupList($scope1, $attrs1, controller, $http1, $timeout1, simpleLists) {
        this.$scope = $scope1;
        this.$attrs = $attrs1;
        this.controller = controller;
        this.$http = $http1;
        this.$timeout = $timeout1;
        this.simpleLists = simpleLists != null ? simpleLists : [];
      }


      /*清除所有列表 */

      GroupList.prototype.clear = function() {
        this.simpleLists = [];
        this.$scope.source = void 0;
      };


      /*获取所有选择项 */

      GroupList.prototype.getSelectedItems = function() {
        var selectedItems;
        selectedItems = [];
        this.simpleLists.forEach(function(simpleList) {
          return selectedItems = selectedItems.concat(simpleList.getSelectedItems());
        });
        return selectedItems;
      };


      /*设置属性 */

      GroupList.prototype.setOptions = function(options) {
        if (angular.isDefined(options.source)) {
          this.$scope.source = options.source;
        }
        if (angular.isDefined(options.sourceUrl)) {
          this.$scope.sourceUrl = options.sourceUrl;
        }
        if (angular.isDefined(options.listType)) {
          this.$scope.listType = options.listType;
        }
        if (angular.isDefined(options.textProperty)) {
          this.$scope.textProperty = options.textProperty;
        }
        if (angular.isDefined(options.groupBy)) {
          this.$scope.groupBy = options.groupBy;
        }
        return this;
      };


      /*若值是从http请求中获取，则重新刷新数据 */

      GroupList.prototype.reload = function() {
        var self;
        self = this;
        if (angular.isDefined(self.$scope.sourceUrl)) {
          return self.$http.get(self.$scope.sourceUrl).success(function(data) {
            self.$scope.source = data;
          });
        }
      };


      /*刷新ngmodel以及ngvalue的值 */

      GroupList.prototype._freshInfo = function() {
        var selectedSubmitValue, selectedSubmitValues, self;
        self = this;
        selectedSubmitValues = [];
        this.simpleLists.forEach(function(simpleList) {
          if (simpleList.getSubmitValue() !== "") {
            return selectedSubmitValues = selectedSubmitValues.concat(simpleList.getSubmitValue());
          }
        });
        return selectedSubmitValue = selectedSubmitValues.join($scope.valueSeparator);
      };

      return GroupList;

    })();

    /*通过分组对象组织数据 */
    _organizeDataByGroup = function(source, groupBy) {
      var i, item, key, len, newDataMap;
      newDataMap = {};
      if (angular.isDefined(source)) {
        for (i = 0, len = source.length; i < len; i++) {
          item = source[i];
          key = item[groupBy];
          if (newDataMap[key] !== void 0) {
            newDataMap[key].push(item);
          } else {
            newDataMap[key] = [item];
          }
        }
      }
      return newDataMap;
    };

    /*分组列表指令构造器 */
    return function($compile, $http, $parse, $timeout, $filter) {
      return {
        restrict: "E",
        template: template,
        replace: true,
        scope: {
          source: "=",
          listType: "@",
          textProperty: "@",
          initCallback: "=",
          groupBy: "@",
          sourceUrl: "@",
          onBeforeSelect: "&",
          onSelect: "&",
          onBeforeUnSelect: "&",
          onUnSelect: "&",
          submitValueExpress: "@",
          valueSeparator: "@"
        },
        controller: function($scope, $element, $attrs) {

          /*1.新建分组列表 */
          this.groupList = new GroupList($scope, $attrs, this, $http, $timeout);
          return this.groupList.reload();
        },
        link: function($scope, $element, $attrs, $controller) {

          /*1. 初始化submitValueExpress */
          $scope.submitValueExpress = $scope.submitValueExpress || "value";
          $scope.submitValueGetter = $parse($scope.submitValueExpress);

          /*2.初始化返回值的分隔符 */
          $scope.valueSeparator = $scope.valueSeparator || ",";

          /*3.判断是否有回调，若有，则执行初始化后的回掉函数 */
          if (angular.isFunction($scope.initCallback)) {
            $scope.initCallback($controller.groupList);
          }

          /*4.监听数据的变化，若发生变化，并重新渲染视图 */
          $scope.$watch('source', (function(newVal) {
            $timeout(function() {
              $scope.newDataMap = {};
              return $controller.groupList.simpleLists = [];
            });
            return $timeout(function() {
              return $scope.newDataMap = _organizeDataByGroup($scope.source, $scope.groupBy);
            });
          }), true);

          /*5.初始化各个事件 */

          /*选择前事件 */
          $scope.onBeforeSelectProxy = function(item) {
            return $scope.onBeforeSelect({
              item: item,
              groupList: $controller.groupList
            });
          };

          /*选择事件 */
          $scope.onSelectProxy = function(item) {
            $scope.onSelect({
              item: item,
              groupList: $controller.groupList
            });
            return $controller.groupList._freshInfo();
          };

          /*取消选择前数据 */
          $scope.onUnSelectProxy = function(item) {
            return $scope.onUnSelect({
              item: item,
              groupList: $controller.groupList
            });
          };

          /*取消选择数据 */
          $scope.onBeforeUnSelectProxy = function(item) {
            $scope.onBeforeUnSelect({
              item: item,
              groupList: $controller.groupList
            });
            return $controller.groupList._freshInfo();
          };
        }
      };
    };
  });

}).call(this);
